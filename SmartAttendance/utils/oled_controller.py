from machine import Pin, I2C
import ssd1306
import utime

class OLEDController:
    def __init__(self, width, height, scl_pin, sda_pin, freq=400000):
        """
        Ініціалізація дисплея OLED.
        """
        self.i2c = I2C(0, scl=Pin(scl_pin), sda=Pin(sda_pin), freq=freq)
        self.display = ssd1306.SSD1306_I2C(width, height, self.i2c)
        self.width = width
        self.height = height
        self.char_width = 8  # Ширина символу в пікселях
        self.char_height = 10  # Висота символу в пікселях
        self.max_chars_per_line = self.width // self.char_width  # Максимум символів в рядку
        self.max_lines = self.height // self.char_height  # Максимум рядків на дисплеї

    def show_message(self, message):
        """
        Вивід повідомлення на OLED-дисплей з обробкою символу \n для переносу,
        автоматичним центруванням тексту по горизонталі та вертикалі.
        """
        self.clear()

        # Розбиваємо текст на рядки за символом \n
        lines = message.split("\n")
        processed_lines = []

        # Перевіряємо кожен рядок на довжину і розбиваємо, якщо він занадто довгий
        for line in lines:
            while len(line) > self.max_chars_per_line:
                processed_lines.append(line[:self.max_chars_per_line])
                line = line[self.max_chars_per_line:]
            processed_lines.append(line)

        # Враховуємо обмеження по кількості рядків
        processed_lines = processed_lines[:self.max_lines]

        # Вираховуємо вертикальне зміщення для центрування
        total_text_height = len(processed_lines) * self.char_height
        vertical_offset = (self.height - total_text_height) // 2

        for i, line in enumerate(processed_lines):
            # Центруємо текст по горизонталі
            x = (self.width - len(line) * self.char_width) // 2
            y = vertical_offset + i * self.char_height
            self.display.text(line, x, y)

        self.display.show()

    def clear(self):
        """
        Очистити дисплей.
        """
        self.display.fill(0)
        self.display.show()

    def turn_off(self):
        """
        Вимкнути дисплей.
        """
        self.clear()

    def show_animation(self, animation_type="like"):
        """
        Відображає просту анімацію на OLED-дисплеї.
        :param animation_type: Тип анімації ("like", "smile").
        """
        self.clear()
        if animation_type == "like":
            # Малюємо "палець вгору" (лайк)
            self.display.fill(0)
            self.display.text("  You got a", 10, 10)
            self.display.text("     Like!", 10, 20)
            self.display.pixel(64, 40, 1)
            self.display.pixel(64, 41, 1)
            for y in range(42, 47):
                self.display.hline(62, y, 5, 1)
            self.display.rect(60, 45, 9, 5, 1)
            self.display.show()
        elif animation_type == "smile":
            # Малюємо "смайлик"
            self.display.fill(0)
            self.display.circle(64, 32, 15, 1)  # Обличчя
            self.display.circle(58, 28, 1, 1)   # Ліве око
            self.display.circle(70, 28, 1, 1)   # Праве око
            self.display.arc(58, 34, 12, 12, 45, 135, 1)  # Посмішка
            self.display.show()

        # Анімація відображається на 1 секунду
        utime.sleep(1)
        self.clear()
        
    def draw_bitmap(self, bitmap, width, height):
        """
        Відображення Bitmap на OLED-дисплеї.
        """
        self.clear()
        byte_index = 0  # Індекс байта в масиві
        for y in range(0, height, 8):  # Висота (по 8 пікселів)
            for x in range(width):  # Ширина
                if byte_index >= len(bitmap):
                    break  # Вихід, якщо масив закінчився
                byte = bitmap[byte_index]  # Отримуємо поточний байт
                byte_index += 1
                for bit in range(8):  # Розбиваємо байт на біти
                    pixel_color = (byte >> bit) & 1  # Витягуємо окремий біт
                    self.display.pixel(x, y + bit, pixel_color)  # Малюємо піксель
        self.display.show()
        
    def show_image_1(self):
        """
        Відображає заздалегідь визначене зображення (наприклад, "Image 1").
        """
        my_bitmap = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 
        0x10, 0x00, 0x80, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x8f, 0xe7, 
        0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xfe, 0xfc, 0xf8, 0xf0, 0xc7, 0x81, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
        0xa0, 0x30, 0x20, 0x20, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xfc, 0xf8, 
        0xf8, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 
        0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xff, 0xc7, 0xf3, 0xfc, 0xfe, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x87, 0xc3, 0xe3, 0x61, 0x01, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x80, 0x00, 0x00, 0x41, 0x47, 0x4f, 0x7f, 0x7f, 
        0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3c, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 
        0x0f, 0x1f, 0x7f, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfc, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x1f, 0x1f, 0x8f, 0x87, 0x03, 0x04, 0x06, 0x13, 0x01, 0x01, 0x01, 0x04, 0x05, 0x0f, 0x0f, 0xcf, 
        0xcf, 0xef, 0xe7, 0xe7, 0xe7, 0x06, 0x03, 0x12, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x03, 0x01, 0x03, 0x07, 0x43, 0x02, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0xc0, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x37, 0x17, 0x13, 
        0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x1f, 0x1f, 0x3f, 0xbf, 0x7f, 0x3f, 0x1f, 0x9f, 0x0c, 
        0x0e, 0x06, 0x03, 0x80, 0x80, 0xc0, 0xe0, 0xe0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 
        0xff, 0x9f, 0xc7, 0xe3, 0xf0, 0x1c, 0x1e, 0x3e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
        0xc0, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0xc0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x30, 0x50, 0x60, 0x60, 0x60, 0x20, 0x60, 0xc0, 0xc0, 0xc0, 0xcf, 0xff, 0xff, 0xf0, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0x7c, 0x38, 0x18, 0x00, 0x00, 0x0c, 0x0e, 0x1d, 0x03, 0x02, 0x05, 0x81, 0xf8, 
        0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xe7, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0xe0, 0xe0, 0x00, 0x00, 0x80, 0x00, 0x90, 0x9e, 0x5f, 
        0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x4f, 0x00, 0x10, 0x10, 0x30, 0x30, 0xf0, 0xe0, 
        0xe4, 0x20, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x01, 0x01, 0x01, 0x00, 0xff, 0x0f, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x10, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
        0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7f, 0xff, 0xff, 0xff, 
        0x3f, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x99, 0x09, 0x09, 0x01, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0f, 0x00, 0x00, 0x20, 0x30, 0x20, 0xe0, 0xa0, 0x61, 
        0x21, 0x60, 0x60, 0x60, 0x40, 0xc0, 0xc1, 0xe1, 0xe3, 0xe2, 0xe6, 0x3e, 0x03, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xe1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 
        0x7e, 0xfc, 0xf8, 0x80, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf9, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 
        0xf0, 0xf0, 0xf0, 0xf8, 0xfa, 0x7f, 0x1f, 0x0f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x08, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xfe, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x01, 0x03, 0x0d, 0x1e, 0x3f, 0x5f, 0xff, 0xff, 0xff, 0xef, 0xef, 0xc7, 0xc7, 0x03, 0x03, 
        0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 
        0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]
        self.draw_bitmap(my_bitmap, 128, 64)
